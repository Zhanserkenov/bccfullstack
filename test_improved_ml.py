#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–π ML –ª–æ–≥–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
"""

import requests
import json
import pandas as pd
from collections import Counter

def test_improved_ml_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é ML –ª–æ–≥–∏–∫—É"""
    base_url = "http://localhost:8080"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π ML –ª–æ–≥–∏–∫–∏...")
    print("=" * 50)
    
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    with open('diverse_results.csv', 'r') as f:
        clients_data = f.read()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
    test_clients = []
    for i in range(50):  # 50 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        age = 25 + (i % 40)  # –í–æ–∑—Ä–∞—Å—Ç –æ—Ç 25 –¥–æ 64
        balance = 50000 + (i % 20) * 100000  # –ë–∞–ª–∞–Ω—Å –æ—Ç 50k –¥–æ 2M
        status = ['–û–±—ã—á–Ω—ã–π', 'VIP', '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π'][i % 3]
        
        test_clients.append({
            'client_code': 1000 + i,
            'name': f'–¢–µ—Å—Ç–ö–ª–∏–µ–Ω—Ç{i}',
            'age': age,
            'city': '–ê–ª–º–∞—Ç—ã',
            'status': status,
            'avg_monthly_balance_KZT': balance
        })
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    test_transactions = []
    categories = ['–ü—Ä–æ–¥—É–∫—Ç—ã', '–ö–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã', '–¢–∞–∫—Å–∏', '–û—Ç–µ–ª–∏', '–ò–≥—Ä–∞–µ–º –¥–æ–º–∞', '–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞', '–ï–¥–∏–º –¥–æ–º–∞']
    
    for client in test_clients:
        for category in categories:
            # –°–ª—É—á–∞–π–Ω—ã–µ —Ç—Ä–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –±–∞–ª–∞–Ω—Å–∞
            base_spending = client['avg_monthly_balance_KZT'] * 0.1
            if category == '–¢–∞–∫—Å–∏' and client['age'] < 35:
                base_spending *= 2  # –ú–æ–ª–æ–¥—ã–µ –±–æ–ª—å—à–µ –µ–∑–¥—è—Ç –Ω–∞ —Ç–∞–∫—Å–∏
            elif category == '–û—Ç–µ–ª–∏' and client['age'] > 40:
                base_spending *= 1.5  # –°—Ç–∞—Ä—à–µ –±–æ–ª—å—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤—É—é—Ç
            elif '–¥–æ–º–∞' in category and client['age'] < 30:
                base_spending *= 1.5  # –ú–æ–ª–æ–¥—ã–µ –±–æ–ª—å—à–µ –¥–æ–º–∞
            
            amount = base_spending * (0.5 + (client['client_code'] % 10) * 0.1)
            test_transactions.append({
                'client_code': client['client_code'],
                'category': category,
                'amount': amount,
                'currency': 'KZT',
                'product': '–î–µ–±–µ—Ç–æ–≤–∞—è –∫–∞—Ä—Ç–∞'
            })
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    test_transfers = []
    for client in test_clients:
        # –í—Ö–æ–¥—è—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        test_transfers.append({
            'client_code': client['client_code'],
            'direction': 'in',
            'amount': client['avg_monthly_balance_KZT'] * 0.3,
            'currency': 'KZT',
            'type': 'salary'
        })
        # –ò—Å—Ö–æ–¥—è—â–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
        test_transfers.append({
            'client_code': client['client_code'],
            'direction': 'out',
            'amount': client['avg_monthly_balance_KZT'] * 0.2,
            'currency': 'KZT',
            'type': 'p2p'
        })
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ CSV
    pd.DataFrame(test_clients).to_csv('test_clients.csv', index=False)
    pd.DataFrame(test_transactions).to_csv('test_transactions.csv', index=False)
    pd.DataFrame(test_transfers).to_csv('test_transfers.csv', index=False)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_clients)} –∫–ª–∏–µ–Ω—Ç–æ–≤, {len(test_transactions)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, {len(test_transfers)} –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
    
    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ API
    print("\nüì§ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ API...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    with open('test_clients.csv', 'rb') as f:
        response = requests.post(f"{base_url}/upload/clients", files={'file': f})
        print(f"–ö–ª–∏–µ–Ω—Ç—ã: {response.status_code} - {response.json().get('message', '–û—à–∏–±–∫–∞')}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    with open('test_transactions.csv', 'rb') as f:
        response = requests.post(f"{base_url}/upload/transactions", files={'file': f})
        print(f"–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {response.status_code} - {response.json().get('message', '–û—à–∏–±–∫–∞')}")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
    with open('test_transfers.csv', 'rb') as f:
        response = requests.post(f"{base_url}/upload/transfers", files={'file': f})
        print(f"–ü–µ—Ä–µ–≤–æ–¥—ã: {response.status_code} - {response.json().get('message', '–û—à–∏–±–∫–∞')}")
    
    # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\n‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    response = requests.post(f"{base_url}/process")
    if response.status_code == 200:
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞: {response.json().get('message', '–û—à–∏–±–∫–∞')}")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {response.text}")
        return
    
    # 4. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìà –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
    response = requests.get(f"{base_url}/stats")
    if response.status_code == 200:
        stats = response.json()
        print(f"–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {stats['total_clients']}")
        print(f"–° —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏: {stats['clients_with_recommendations']}")
        
        print("\nüéØ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∞–º:")
        for product, count in stats['product_distribution'].items():
            percentage = (count / stats['total_clients']) * 100
            print(f"  {product}: {count} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({percentage:.1f}%)")
        
        # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        total_recommendations = sum(stats['product_distribution'].values())
        unique_products = len(stats['product_distribution'])
        
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è:")
        print(f"  –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {unique_products}/10")
        print(f"  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è: {unique_products/10:.2f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞
        max_count = max(stats['product_distribution'].values())
        max_percentage = (max_count / stats['total_clients']) * 100
        
        print(f"  –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {max_percentage:.1f}%")
        
        if max_percentage < 60:  # –ù–∏ –æ–¥–∏–Ω –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –¥–æ–º–∏–Ω–∏—Ä–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 60%
            print("‚úÖ –•–æ—Ä–æ—à–µ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!")
        else:
            print("‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        product_types = {
            '–î–µ–ø–æ–∑–∏—Ç—ã': ['–î–µ–ø–æ–∑–∏—Ç –°–±–µ—Ä–µ–≥–∞—Ç–µ–ª—å–Ω—ã–π', '–î–µ–ø–æ–∑–∏—Ç –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π', '–î–µ–ø–æ–∑–∏—Ç –ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π'],
            '–ö–∞—Ä—Ç—ã': ['–ö—Ä–µ–¥–∏—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞', '–ü—Ä–µ–º–∏–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞', '–ö–∞—Ä—Ç–∞ –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'],
            '–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏': ['–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–ó–æ–ª–æ—Ç—ã–µ —Å–ª–∏—Ç–∫–∏'],
            '–î—Ä—É–≥–æ–µ': ['–ö—Ä–µ–¥–∏—Ç –Ω–∞–ª–∏—á–Ω—ã–º–∏', '–ú—É–ª—å—Ç–∏–≤–∞–ª—é—Ç–Ω—ã–π —Å—á–µ—Ç']
        }
        
        print(f"\nüè∑Ô∏è –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤:")
        for type_name, products in product_types.items():
            type_count = sum(stats['product_distribution'].get(p, 0) for p in products)
            type_percentage = (type_count / stats['total_clients']) * 100
            print(f"  {type_name}: {type_count} –∫–ª–∏–µ–Ω—Ç–æ–≤ ({type_percentage:.1f}%)")
    
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {response.text}")
    
    # 5. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    print(f"\nüîç –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–µ 5 –∫–ª–∏–µ–Ω—Ç–æ–≤):")
    for i in range(5):
        client_code = 1000 + i
        response = requests.get(f"{base_url}/recommendations/{client_code}")
        if response.status_code == 200:
            rec = response.json()
            print(f"\n–ö–ª–∏–µ–Ω—Ç {client_code} ({rec['client_name']}):")
            for j, product in enumerate(rec['recommendations'], 1):
                print(f"  {j}. {product['product']}: {product['benefit_kzt_per_month']:.0f} ‚Ç∏/–º–µ—Å")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_code}")

if __name__ == "__main__":
    test_improved_ml_logic()
